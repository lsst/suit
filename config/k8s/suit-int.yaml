apiVersion: apps/v1beta2 # for versions before 1.8.0 use apps/v1beta1
kind: Deployment
metadata:
  name: suit
  namespace: portal-int
spec:
  selector:
    matchLabels:
      app: suit
  replicas: 2 # tells deployment to run 1 pods matching the template
  template: # create pods using pod definition in this template
    metadata:
      labels:
        app: suit
    spec:
      nodeSelector:
        environment: portal-int
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "portal"
        effect: "NoSchedule"
      securityContext:
        runAsUser: 101
        fsGroup: 101
      containers:
      - name: suit
        image: ipac/suit:lsst-dev
        imagePullPolicy: Always
        resources:
          limits:
            memory: "24Gi"
        ports:
        - containerPort: 8080
        volumeMounts:
        - mountPath: /firefly/workarea
          name: firefly-workarea
        - mountPath: /firefly/config
          name: firefly-config
        env:
        - name: MANAGER
          value: "TRUE"
        - name: ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: suit-secret
              key: ADMIN_PASSWORD
        - name: FIREFLY_OPTS
          value: "-Dvisualize.fits.search.path=/datasets"
        - name: FIREFLY_SHARED_WORK_DIR
          value: /firefly/workarea
        - name: SERVER_CONFIG_DIR
          value: /firefly/config
        - name: MAX_JVM_SIZE
          value: "23G"
        - name: DEBUG
          value: "FALSE"
      volumes:
      - name: firefly-workarea
        hostPath:
          path: /sui/firefly/workarea
          type: Directory
      - name: firefly-config
        hostPath:
          path: /sui/firefly/config
          type: Directory

---

apiVersion: v1
kind: Service
metadata:
  name: suit
  namespace: portal-int
spec:
  selector:
    app: suit
  type: NodePort
  ports:
  - protocol: TCP
    port: 8080 # the port that this service should serve on
    targetPort: 8080

---

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: suit
  namespace: portal-int
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/auth-url: "https://lsst-lsp-int.ncsa.illinois.edu/auth?capability=exec:portal"
    nginx.ingress.kubernetes.io/auth-response-headers: X-Auth-Request-Uid, X-Auth-Request-Token
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/affinity: "cookie"
    nginx.ingress.kubernetes.io/proxy-body-size: "0m"
    nginx.ingress.kubernetes.io/rewrite-target: /suit
    nginx.ingress.kubernetes.io/proxy-redirect-from: ~^(http[s]?://[^/]+)/suit/(.+)$
    nginx.ingress.kubernetes.io/proxy-redirect-to: $1/portal/app/$2
    nginx.ingress.kubernetes.io/proxy-cookie-path: /suit /portal/app
    nginx.ingress.kubernetes.io/configuration-snippet: |
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header X-Forwarded-Proto https;
      proxy_set_header X-Forwarded-Port 443;
      proxy_set_header X-Forwarded-Path /portal/app;
      error_page 403 = "https://lsst-lsp-int.ncsa.illinois.edu/oauth2/start?rd=$request_uri";
spec:
  tls:
  - hosts:
    - lsst-lsp-int.ncsa.illinois.edu
    secretName: tls-certificate-lsp-int
  rules:
  - host: lsst-lsp-int.ncsa.illinois.edu
    http:
      paths:
      - path: "/portal/app"
        backend:
          serviceName: suit
          servicePort: 8080

